== 데이터베이스 == 

무결성 (정규화) 1, 2, 3, BCNF 정규화
역정규화

퍼포먼스(성능) vs 무결성(정규화)

무결성 -> 은행권 퍼포먼스보단 오차 오류가 없어야됨

퍼포먼스 -> 페북, ex) 좋아요 눌렀다가 취소되도 피해안오듯이 속도 위주




RDB - 관계형 베이스
ㄴ 무결성에 맞춰져있음



-DML-

CRUD 
C - 입력
R - 읽기
U - 업데이트
D - 삭제 


NoSQL - 읽기속도에 맞춤형 - 
ㄴ R 읽기에 맞춰져있다
ㄴ 대표 SQL - MongoDB

DCL - 관리자가 사용자에게 권한줄때
DDL - 테이블만들고 수정 삭제



pk(primary key) - 식별할수있는 키  ( 이름, 나이, 연락처, 이런것) (정수값을 주자) 1,2,3
pk가 가장 중요한 역활 - 레코드구별 (중복된값 허용 X)

가로줄(한줄,행) -레코드 
세로줄(열) - 컬럼

===========================================================

명령어 :
unique = 중복방지   ex) 주민번호 -> 문자열로해야됨 왜냐? 2000년생이후부터 00이 붙으니까 0이앞에 붙으면 날라감

not null = 값을 무조건 넣어야된다 

primary key = unique 와 not null 기능이 자동으로 들어감 
즉, 중복방지, 값무조건 넣기











================================================================
1.
테이블생성시
~~내용
primary key(a,b,c);

이렇게해야 여러개 구분해서 프라이머리 키 줄수있음
위에 내용대로 하면 한 컬럼에 a,b,c가 중복되면안됨 (즉 한줄에 전체 다 입력되고 그내용은 다시중복되면 안됨)

a primary key
b primary key    < 이런식으로 안됨 !!


2.
rollback;    이전에했던 작업 다돌리는것 커밋전까지 아주 좋은거같다 이거

- DELETE t_student
WHERE i_student = 3;  이런식으로 했을때 
삭제한 데이터를 다시 돌린다
(단, 테이블을 날리면 롤백안됨)



3.
transition
트렌지션
전체 내용이 에러가 안터졌을때만 커밋
에러가 터질경우 전체 롤백 함


4.
DELETE, UPDATE 문은 정말 신중하게쓰자
잘못썻다 좆됨


5. INSERT INTO t_student
할때 컬럼을 생략하지말고 항상 일일이 지정해주자
(i_student,nm,age) <-- 이렇게주자 생략하고도 넣을순있지만 추후 버그에 대비 100% 를 만들자


6.
UPDATE t_student
WHERE i_student = 19;   (만약 19자리가 없다면)
실행시 0개행이 없다고 뜸  ( 에러는 안뜨지만 즉, 수정이 안됬단 뜻)


7.
데이터베이스는 순서는 안중요함
그 테이블 안에 값이 있는지 그게 중요


8.
substr()
substr(컬럼명, 몇번째, 몇번째까지 함수
SELECT nm, substr(nm,2,1)
from t_student;

몇번째 글자를 몇번째'까지' 나타낼때 사용



9.
instr();
컬럼명, n('문자열 or 정수) 값이 몇번째에 있는지 알려주는 함수
SELECT nm, instr(nm,'하')    
FROM t_student;


8 ~ 9번 이해 안되면 집에서 테스트해보기
LPAD , RPAD 도 자주사용함 집가서 검색해보기



10. 
SELECT trim('  a    ') FROM DUAL;
좌우 공백 제거
은근많이쓰임 ( HTML에서 값 넘어올때 공백으로 넘어 오는 경우를 막기위해 )


11. 
DUAL
직접 사용해보면됨 테이블 값이아닌 그냥 일정 한개의 값만 내가 볼때 사용하는것
SELECT 1+1 FROM DUAL; 


12.
concat('a','b')  문자열 두개를 합치는 기능
SELECT concat('a','b') FROM DUAL;

SELECT concat(concat('a','b'),'c') FROM DUAL;
복수기능 계속 concat 만들고 괄호치고 생성해야됨


13.



































